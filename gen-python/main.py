import sys
import os.path

from antlr4 import *

from grammar.ShaperLexer import ShaperLexer
from grammar.ShaperParser import ShaperParser

from ByteCodeVisitor import ByteCodeVisitor
from CheckVisitor import CheckVisitor

from Manager import Manager

from ByteCodeWriter import ByteCodeWriter
from ShaperErrorListener import ShaperErrorListener

from ParametersHandler import ParametersHandler

def main(argv):
    sys.setrecursionlimit(10000)

    programmParamsHand = ParametersHandler(argv)

    programmParamsHand.fetchParameters()
    
    if programmParamsHand.showHelp:
        print("py main.py filename [flags]\n")
        print("Flags:")
        print("--hep - displays this text")
        print("--debug - prints in console list of commands generated by script")
        print("-o [filename] - set output file's name and dir")
        return

    if not os.path.isfile(programmParamsHand.inputName):
        print("File doesn't exist!")
        return

    input_stream = FileStream(programmParamsHand.inputName)

    error_listener = ShaperErrorListener()

    lexer = ShaperLexer(input_stream)
    lexer.removeErrorListeners()
    lexer.addErrorListener(error_listener)

    stream = CommonTokenStream(lexer)

    parser = ShaperParser(stream)
    parser.removeErrorListeners()
    parser.addErrorListener(error_listener)
    

    tree = parser.programm()
    
    if error_listener.errorOccured:
        return


    manager = Manager()
    
    checkVisitor = CheckVisitor(manager)


    checkVisitor.visit(tree)   
    checkVisitor.checkFunctionsBody()

    if(len(checkVisitor.errorstack) > 0):
        for error in checkVisitor.errorstack:
            print(error)

    else:      
        byteCodeVisitor = ByteCodeVisitor(checkVisitor.manager)

        byteCodeVisitor.generateCode(tree)

        writer = ByteCodeWriter(programmParamsHand.outputName)

        if programmParamsHand.debug:
            print(byteCodeVisitor.maker.commandsQueue)
                
        writer.writeToFile(byteCodeVisitor.maker.commandsQueue)


if __name__ == '__main__':
    main(sys.argv)