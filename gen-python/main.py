import sys
import os.path

from antlr4 import *

from grammar.ShaperLexer import ShaperLexer
from grammar.ShaperParser import ShaperParser

from ByteCodeVisitor import ByteCodeVisitor
from CheckVisitor import CheckVisitor

from Manager import Manager

from ShaperErrorListener import ShaperErrorListener

from ByteCodeWriter import ByteCodeWriter
from ParametersHandler import ParametersHandler

def main(argv):
    sys.setrecursionlimit(10000)

    programmParamsHand = ParametersHandler(argv)

    programmParamsHand.fetchParameters()
    
    if programmParamsHand.showHelp:
        display_help()
        return

    if not os.path.isfile(programmParamsHand.inputName):
        print("File doesn't exist!")
        return


    tree = parse_program(FileStream(programmParamsHand.inputName))
    
    if  tree == None:
        return

    errors, manager = check_tree(tree)



    if(len(errors) > 0):
        for error in errors:
            print(error)

    else:
     #   print(manager.global_offset)      
        commandsQueue = generate_bytecode(tree, manager)

        if programmParamsHand.debug:
            print(commandsQueue)
                
        save_bytecode(programmParamsHand.outputName, manager.global_offset, commandsQueue)




def display_help():
    print("py main.py filename [flags]\n")
    print("Flags:")
    print("--hep - displays this text")
    print("--debug - prints in console list of commands generated by script")
    print("-o [filename] - set output file's name and dir")


def parse_program(inputfile):
    error_listener = ShaperErrorListener()

    lexer = ShaperLexer(inputfile)
    lexer.removeErrorListeners()
    lexer.addErrorListener(error_listener)

    stream = CommonTokenStream(lexer)

    parser = ShaperParser(stream)
    parser.removeErrorListeners()
    parser.addErrorListener(error_listener)

    tree = parser.programm()

    if error_listener.errorOccured:
        return None
    else: 
        return tree


def check_tree(tree):
    checkVisitor = CheckVisitor(Manager())

    checkVisitor.visit(tree)   
    checkVisitor.checkFunctionsBody()

    return checkVisitor.errorstack, checkVisitor.manager


def generate_bytecode(tree, manager):
    byteCodeVisitor = ByteCodeVisitor(manager)

    byteCodeVisitor.generateCode(tree)
    return byteCodeVisitor.maker.commandsQueue

def save_bytecode(outputfile, memory_offset ,commands):
    writer = ByteCodeWriter(outputfile)
    writer.writeToFile(memory_offset, commands)

if __name__ == '__main__':
    main(sys.argv)